#compdef ns-eval

# AUTOMATICALLY GENERATED by `shtab`


_shtab_tyro_ns_eval_commands() {
  local _commands=(
    
  )
  _describe 'ns-eval commands' _commands
}

_shtab_tyro_ns_eval_options=(
  {-h,--help}"[show this help message and exit]:help:"
  "--load-config[Path to config YAML file. (required)]:load-config:_files"
  "--output-path[Name of the output file. (default\: output.json)]:output-path:_files"
  "--render-output-path[Optional path to save rendered outputs to. (default\: None)]:render-output-path:_files"
)


_shtab_tyro_ns_eval() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_tyro_ns_eval_options[(I)${(q)one_or_more}*]} + ${_shtab_tyro_ns_eval_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_tyro_ns_eval_options+=(': :_shtab_tyro_ns_eval_commands' '*::: :->ns-eval')
  fi
  _arguments -C -s $_shtab_tyro_ns_eval_options

  case $state in
    ns-eval)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_tyro_ns_eval-$line[1]:"
      case $line[1] in
        
      esac
  esac
}



typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_tyro_ns_eval -N ns-eval
else
  # autoload from fpath, call function directly
  _shtab_tyro_ns_eval "$@"
fi

